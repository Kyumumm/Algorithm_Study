from itertools import combinations
# 파이썬에서 제공하는 순열 조합 라이브러리 itertools 모듈의 combination 함수 사용

n, k = map(int, input().split())
num_list = list(map(int, input().split()))
num = 0

for i in combinations(num_list, 3):
    temp_sum = sum(i)
    if num < temp_sum <= k:
        num = temp_sum
print(num)

print(list(combinations(num_list, 2)))

# 하나의 리스트에서 모든 조합을 계산을 해야 한다면, permutations, combinations을 사용
# 두개 이상의 리스트에서 모든 조합을 계산해야 한다면, product를 사용
# 하나의 리스트에서 모든 조합을 구하기

# items = ['1', '2', '3', '4', '5']
# from itertools import permutations
# list(permutations(items, 2))
# # [('1', '2'), ('1', '3'), ('1', '4'), ('1', '5'), ('2', '1'), ('2', '3'), ('2', '4'), ('2', '5'), ('3', '1'), ('3', '2'), ('3', '4'), ('3', '5'), ('4', '1'), ('4', '2'), ('4', '3'), ('4', '5'), ('5', '1'), ('5', '2'), ('5', '3'), ('5', '4')]
#
# from itertools import combinations
# list(combinations(items, 2))
# # [('1', '2'), ('1', '3'), ('1', '4'), ('1', '5'), ('2', '3'), ('2', '4'), ('2', '5'), ('3', '4'), ('3', '5'), ('4', '5')]


# 두개 이상의 리스트의 모든 조합 구하기

# from itertools import product
#
# items = [['a', 'b', 'c,'], ['1', '2', '3', '4'], ['!', '@', '#']]
# list(product(*items))
# [('a', '1', '!'), ('a', '1', '@'), ('a', '1', '#'), ('a', '2', '!'), ('a', '2', '@'), ('a', '2', '#'), ('a', '3', '!'), ('a', '3', '@'), ('a', '3', '#'), ('a', '4', '!'), ('a', '4', '@'), ('a', '4', '#'), ('b', '1', '!'), ('b', '1', '@'), ('b', '1', '#'), ('b', '2', '!'), ('b', '2', '@'), ('b', '2', '#'), ('b', '3', '!'), ('b', '3', '@'), ('b', '3', '#'), ('b', '4', '!'), ('b', '4', '@'), ('b', '4', '#'), ('c,', '1', '!'), ('c,', '1', '@'), ('c,', '1', '#'), ('c,', '2', '!'), ('c,', '2', '@'), ('c,', '2', '#'), ('c,', '3', '!'), ('c,', '3', '@'), ('c,', '3', '#'), ('c,', '4', '!'), ('c,', '4', '@'), ('c,', '4', '#')]